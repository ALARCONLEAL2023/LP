<?xml version="1.0"?>
<configuration>
  <configSections>
    <section name="log" type="Tenaris.Library.Log.LogConfiguration, Tenaris.Library.Log"/>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler,log4net"/>
  </configSections>
  <appSettings>
    <add key="SP_GetInterruptions" value="[InterruptionTamsa].[GetGroupInterruptionsDetailsWEB]"/>
    <add key="SP_GetCategories" value="[Interruption].[GetCategories]"/>
    <add key="SP_GetCodeCategories" value="[Interruption].[GetCodeCategories]"/>
    <add key="SP_GetCodes" value="[Interruption].[GetCodes]"/>
    <add key="SP_GetInterruptionToPrint" value="[InterruptionTamsa].[GetInterruptionsListToPrintWEB]"/>
    <add key="SP_GetDelaysToPrint" value="[InterruptionTamsa].[GetDelaysListToPrintWEB]"/>
    <add key="SP_TotalsTimeToPrint" value="[InterruptionTamsa].[GetTotalsTimesToPrintWEB]"/>
  </appSettings>
  <connectionStrings>
    <clear/>
    <add name="Linea 1" connectionString="Application Name=InterruptionWeb;Data Source=TNATFT2PRDLSN.tnsautoca.techint.net,5040;Initial Catalog=Level2_LinePipe;Persist Security Info=True; Integrated Security=SSPI;MultipleActiveResultSets=False;" providerName="System.Data.SqlClient"/>
  </connectionStrings>
  <system.web>
    <globalization fileEncoding="utf-8" requestEncoding="utf-8" responseEncoding="utf-8" culture="es-MX" uiCulture="es-MX"/>
    <compilation debug="true" targetFramework="4.0"/>
    <!--
            The <authentication> section enables configuration 
            of the security authentication mode used by 
            ASP.NET to identify an incoming user. 
        -->
    <authentication mode="Windows"/>
    <!--
            The <customErrors> section enables configuration 
            of what to do if/when an unhandled error occurs 
            during the execution of a request. Specifically, 
            it enables developers to configure html error pages 
            to be displayed in place of a error stack trace.
        -->
    <pages controlRenderingCompatibilityVersion="3.5" clientIDMode="AutoID"/>
  </system.web>
  <log4net>
    <appender name="ConsoleAppender" type="log4net.Appender.ColoredConsoleAppender">
      <mapping>
        <level value="Error"/>
        <foreColor value="Red, HighIntensity"/>
      </mapping>
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%message%newline"/>
      </layout>
    </appender>
    <appender name="InterruptionReport" type="log4net.Appender.RollingFileAppender">
      <filter type="log4net.Filter.LevelRangeFilter">
        <param name="LevelMin" value="ALL"/>
        <param name="LevelMax" value="OFF"/>
      </filter>
      <param name="DatePattern" value="'.'yyyyMMdd'.log' "/>
      <param name="File" value="Logs\InterruptionReport"/>
      <param name="AppendToFile" value="true"/>
      <param name="rollingStyle" value="Date"/>
      <param name="maxSizeRollBackups" value="10"/>
      <param name="maximumFileSize" value="4MB"/>
      <param name="staticLogFileName" value="false"/>
      <layout type="log4net.Layout.PatternLayout">
        <param name="Header" value="[BEGIN_LOG %date{yyyy-MM-dd HH:mm} ===] %newline" type="log4net.Util.PatternString"/>
        <param name="Footer" value="[END_LOG %date{yyyy-MM-dd HH:mm} =====] %newline" type="log4net.Util.PatternString"/>
      </layout>
    </appender>
    <logger name="Tenaris.Library.Log">
      <appender-ref ref="ConsoleAppender"/>
      <appender-ref ref="InterruptionReport"/>
    </logger>
  </log4net>
  <log maxQueueSize="10000" dumpStack="true"  msgFormat="{TypeChar} {Timestamp:yyyy-MM-dd HH:mm:ss:fff} [{ThreadId}] {IdentString} {Message}"; logLevel="debug" traceAttributeLogEnabled="true" path="..\..\..\Logs\Interruptions" additionalLogDestination="Console" longBaseName="Interruptions" logAssemblyLoad="False" />
  <!-- 
        The system.webServer section is required for running ASP.NET AJAX under Internet
        Information Services 7.0.  It is not necessary for previous version of IIS.
    -->
  <system.web.extensions>
    <scripting>
      <webServices>
        <jsonSerialization maxJsonLength="35000000"/>
      </webServices>
    </scripting>
  </system.web.extensions>
</configuration>